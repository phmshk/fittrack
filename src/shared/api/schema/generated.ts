/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Creates a new user account and returns a JWT token.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description User account successfully created. Returns a JWT token. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticates a user and returns a JWT token.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Successfully authenticated. Returns a JWT token. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/food-logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a new food log entry
         * @description Creates a new entry for a consumed food item.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FoodLogInput"];
                };
            };
            responses: {
                /** @description Successfully created. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FoodLog"];
                    };
                };
                /** @description Authentication error. The user does not have permission to access this resource. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/food-logs/{date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get entries for a specific day
         * @description Retrieves all food log entries for the specified date.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Date in YYYY-MM-DD format */
                    date: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response with a list of entries. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FoodLog"][];
                    };
                };
                /** @description Authentication error. The user does not have permission to access this resource. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/food-logs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing entry */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entry ID to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["FoodLogInput"];
                };
            };
            responses: {
                /** @description Entry successfully updated. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FoodLog"];
                    };
                };
                /** @description Authentication error. The user does not have permission to access this resource. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Entry with such ID not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundError"];
                    };
                };
            };
        };
        post?: never;
        /** Delete an entry */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Entry ID to delete */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Entry successfully deleted. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication error. The user does not have permission to access this resource. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Entry with such ID not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NotFoundError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-goals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user goals
         * @description Retrieves the current nutritional goals for the user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response with user goals. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGoals"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        /**
         * Update user goals
         * @description Updates one or more nutritional goals for the user.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserGoalsInput"];
                };
            };
            responses: {
                /** @description Goals successfully updated. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGoals"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/search.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for products by name
         * @description Retrieves a list of products matching the search query.
         */
        get: {
            parameters: {
                query: {
                    /** @description The name of the product to search for (e.g., 'Tilsiter'). */
                    search_terms: string;
                    /** @description Number of results to return. */
                    page_size: number;
                    /** @description Must be set to 1 to receive a JSON response. */
                    json: 1;
                    /** @description Must be set to 1 to enable simple search. */
                    search_simple: 1;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of products found. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SearchResponse"];
                    };
                };
                400: components["responses"]["BadRequestError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/product/{barcode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a product by its barcode
         * @description Retrieves detailed information for a single product using its barcode.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The barcode of the product. */
                    barcode: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detailed information about the product. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProductResponse"];
                    };
                };
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RegisterRequest: {
            /**
             * @description User's full name.
             * @example John Doe
             */
            name: string;
            /**
             * Format: email
             * @description User's email address.
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @description User's password. Must be at least 8 characters long.
             * @example strongPassword123
             */
            password: string;
        };
        User: {
            /**
             * Format: uuid
             * @description User's unique identifier (server-generated).
             */
            readonly id: string;
            /**
             * @description User's full name.
             * @example John Doe
             */
            name: string;
            /**
             * Format: email
             * @description User's email address.
             * @example user@example.com
             */
            email: string;
        };
        AuthResponse: {
            /**
             * @description JWT token for authenticating subsequent requests.
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
             */
            token: string;
            user: components["schemas"]["User"];
        };
        ErrorResponse: {
            /**
             * @description Error description.
             * @example Entry with such ID not found.
             */
            message: string;
            /**
             * @description (Optional) Machine-readable error code for the frontend.
             * @example RESOURCE_NOT_FOUND
             */
            errorCode?: string;
            /**
             * @description (Optional) Additional details about the error, such as which fields failed validation.
             * @example {
             *       "field": "calories",
             *       "error": "must be a positive number"
             *     }
             */
            details?: Record<string, never>;
        };
        LoginRequest: {
            /**
             * Format: email
             * @description User's email address.
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @description User's password.
             * @example strongPassword123
             */
            password: string;
        };
        /**
         * Format: date
         * @description Date of the entry in YYYY-MM-DD format.
         * @example 2025-09-16
         */
        date: string;
        /**
         * @description Meal type.
         * @enum {string}
         */
        mealType: "breakfast" | "lunch" | "dinner" | "snacks";
        /**
         * @description Name of the food item.
         * @example Chicken Salad
         */
        name: string;
        /**
         * @description Number of calories.
         * @example 150
         */
        calories: number;
        /**
         * @description Number of proteins (in grams).
         * @example 5
         */
        proteins: number;
        /**
         * @description Number of fats (in grams).
         * @example 3
         */
        fats: number;
        /**
         * @description Number of saturated fats (in grams).
         * @example 1
         */
        saturatedFats: number;
        /**
         * @description Number of carbs (in grams).
         * @example 27
         */
        carbs: number;
        /**
         * @description Number of sugars (in grams).
         * @example 10
         */
        sugars: number;
        /**
         * @description Number of grams (in grams).
         * @example 100
         */
        grams: number;
        FoodLogInput: {
            date: components["schemas"]["date"];
            mealType: components["schemas"]["mealType"];
            name: components["schemas"]["name"];
            calories: components["schemas"]["calories"];
            proteins: components["schemas"]["proteins"];
            fats: components["schemas"]["fats"];
            saturatedFats: components["schemas"]["saturatedFats"];
            carbs: components["schemas"]["carbs"];
            sugars: components["schemas"]["sugars"];
            grams: components["schemas"]["grams"];
        };
        FoodLog: {
            /**
             * Format: uuid
             * @description Unique identifier (generated by the server).
             */
            readonly id: string;
            /**
             * Format: date
             * @description Date of the entry in YYYY-MM-DD format.
             * @example 2025-09-16
             */
            date: string;
            /**
             * @description Meal type.
             * @enum {string}
             */
            mealType: "breakfast" | "lunch" | "dinner" | "snacks";
            /**
             * @description Name of the food item.
             * @example Chicken Salad
             */
            name: string;
            /**
             * @description Number of calories.
             * @example 150
             */
            calories: number;
            /**
             * @description Number of proteins (in grams).
             * @example 5
             */
            proteins: number;
            /**
             * @description Number of fats (in grams).
             * @example 3
             */
            fats: number;
            /**
             * @description Number of saturated fats (in grams).
             * @example 1
             */
            saturatedFats: number;
            /**
             * @description Number of carbs (in grams).
             * @example 27
             */
            carbs: number;
            /**
             * @description Number of sugars (in grams).
             * @example 10
             */
            sugars: number;
            /**
             * @description Number of grams (in grams).
             * @example 100
             */
            grams: number;
        };
        /** @description Authentication error. The user does not have permission to access this resource. */
        UnauthorizedError: unknown;
        /** @description Resource not found. The requested resource does not exist. */
        NotFoundError: unknown;
        UserGoals: {
            /**
             * @description Target number of calories per day.
             * @example 2200
             */
            targetCalories: number;
            /**
             * @description Target number of proteins in grams per day.
             * @example 160
             */
            targetProteins: number;
            /**
             * @description Target number of carbs in grams per day.
             * @example 200
             */
            targetCarbs: number;
            /**
             * @description Target number of fats in grams per day.
             * @example 80
             */
            targetFats: number;
        };
        /**
         * @description Target number of calories per day.
         * @example 2200
         */
        targetCalories: number;
        /**
         * @description Target number of proteins in grams per day.
         * @example 160
         */
        targetProteins: number;
        /**
         * @description Target number of carbs in grams per day.
         * @example 200
         */
        targetCarbs: number;
        /**
         * @description Target number of fats in grams per day.
         * @example 80
         */
        targetFats: number;
        UserGoalsInput: {
            targetCalories?: components["schemas"]["targetCalories"];
            targetProteins?: components["schemas"]["targetProteins"];
            targetCarbs?: components["schemas"]["targetCarbs"];
            targetFats?: components["schemas"]["targetFats"];
        };
        /** @description Core nutritional information per 100g. */
        Nutriments: {
            /**
             * @description Energy in kilocalories per 100g.
             * @example 42
             */
            "energy-kcal_100g"?: number;
            /**
             * @description Proteins per 100g.
             * @example 0
             */
            proteins_100g?: number;
            /**
             * @description Total fat per 100g.
             * @example 0
             */
            fat_100g?: number;
            /**
             * @description Saturated fat per 100g.
             * @example 0
             */
            "saturated-fat_100g"?: number;
            /**
             * @description Carbohydrates per 100g.
             * @example 10.6
             */
            carbohydrates_100g?: number;
            /**
             * @description Sugars per 100g.
             * @example 10.6
             */
            sugars_100g?: number;
        } & {
            [key: string]: unknown;
        };
        /** @description Represents a food product from Open Food Facts. */
        Product: {
            /**
             * @description The barcode of the product.
             * @example 3017620422003
             */
            code?: string;
            /**
             * @description The name of the product.
             * @example Coca-Cola
             */
            product_name?: string;
            nutriments?: components["schemas"]["Nutriments"];
        };
        SearchResponse: {
            /** @description Total number of products found. */
            count?: number;
            /** @description Number of products per page. */
            page_size?: number;
            products?: components["schemas"]["Product"][];
        };
        ProductResponse: {
            /**
             * @description Status of the request (1 for success).
             * @example 1
             */
            status?: number;
            /** @description The requested barcode. */
            code?: string;
            product?: components["schemas"]["Product"];
        };
    };
    responses: {
        /** @description Bad request. The server could not process the request due to a client-side error (e.g., invalid data format). */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Authentication error. The user does not have permission to access this resource. */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Resource not found. The requested resource does not exist. */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
